.row
  .col.s12.m6
    .card
      .card-content
        .card-title Programming languages
        %ul.collection
          %li.collection-item Ruby - My bread and butter
          %li.collection-item Go - When Ruby doesn't cut it, or I crave some types, I love to use Go
          %li.collection-item
            C - I love lower-level programming, and C is a tool for any (system-level) job
          %li.collection-item 
            TypeScript - Experience with large migrations to TypeScript, and I miss the type system
            any time I'm not using it.
          %li.collection-item 
            JavaScript - When TypeScript isn't available, I still love the functional, event-driven 
            style of JavaScript
          %li.collection-item 
            C# - I have a lot of experience with C#. It's not my language of choice, but I'm productive
            and effective when I'm using it.
          %li.collection-item 
            Assembly - Seeing the system from the bottom-up is a lot of fun and informative
          %li.collection-item 
            FORTH - My "weird" language of choice. I love implementing FORTH from scratch, and the
            concatenative nature is a nice change of pace.

  .col.s12.m6
    .card
      .card-content
        .card-title Frameworks
        %ul.collection
          %li.collection-item
            Ruby on Rails - It may not be the fastest, but it's reliable and I can take an idea from
            a vague idea to a working system super quickly when I'm using rails
          %li.collection-item React - My weapon of choice when battling the frontend
          %li.collection-item 
            Kubernetes - I can stand up a cluster, deploy apps to it, debug it, and provision it easily.
            My joke after a week of cluster configuration is that my favorite language is YAML.
          %li.collection-item 
            Docker - The reproducibility of a good Dockerfile and the simplicity of running and 
            configuring containers makes me love working with Docker and the Docker ecosystem.
          %li.collection-item
            Sidekiq - The end-all, be-all for background job systems in my opinion. The simplicity and
            reliability easily exceeds any other framework I've seen for this kind of job system.
          %li.collection-item
            ASP.NET MVC - As the de-facto way to develop web applications with C#, I have a lot of
            experience with the best and worst of what ASP.NET has to offer.
          %li.collection-item Angular (JS and 2+) - My second choice for large web application frontends.

  .col.s12.m6
    .card
      .card-content
        .card-title UNIX-Style Systems
        %ul.collection
          %li.collection-item
            Linux Family - Experience installing, virtualizing, administrating, tuning, compiling, 
            tweaking and fixing Linux installations. Very familiar with distributions in the Debian 
            family, but also have experience with more exotic distributions, such as CoreLinux, Gentoo, 
            Arch, and Slackware.
          %li.collection-item
            Apple MacOS (Formerly know as OSX) - Experience using, programming, and networking Apple
            MacOS systems. My second choice if a open-source alternative isn't available
          %li.collection-item
            BSD Family (FreeBSD, NetBSD, OpenBSD) - Hobby experience administrating, programming, and 
            networking with BSD-family systems.

  .col.s12.m6
    .card
      .card-content
        .card-title Microsoft Systems
        %ul.collection
          %li.collection-item
            Modern Windows (Windows 7 and up) - Experience administrating, securing (via Bitlocker),
            and upgrading multiple systems on a network. Familiar with the Microsoft programming 
            stack, SQL, Office, and the .NET framework.
          %li.collection-item
            Older NT-Family Systems (ME, XP, Vista) - Experience administrating, upgrading, and 
            managing older Windows systems. Familiar with the registry, virus protection, and security 
            on these older versions.
          %li.collection-item
            Legacy Systems (MS-DOS, Win95, Win98) - Experience upgrading, navigating, and programming
            these old systems. Experienced with MS-DOS and MS-DOS development.